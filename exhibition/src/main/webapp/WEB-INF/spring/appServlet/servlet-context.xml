<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<beans:bean id="dataSource" 
		class="org.springframework.jndi.JndiObjectFactoryBean">
		<beans:property name="jndiName" value="java:comp/env/jdbc/myoracle"/>
	</beans:bean>
	
	<!-- 위의 설정을 java code 로 코딩하면
		dataSource=new JndiObjectFactoryBean();
		dataSource.setJndiName("java:comp/env/jdbc/myoracle") 
	-->
		
	<beans:bean id="sessionFactory" 
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource"/> <!-- 이미 만들어진 참조값 -->
		<beans:property name="configLocation"
	value="classpath:com/acorn/exhibition/mybatis/Configuration.xml"/> <!-- 직접 만든 문자열이나  -->
	</beans:bean>
	
	<!--
		 위의 설정을 java code 로 코딩하면
		dataSource=new JndiObjectFactoryBean();
		dataSource.setJndiName("java:comp/env/jdbc/myoracle")
		
		new SqlSessionFactory = new SqlSessionFactoryBean();
		sessionFactory.setDataSource(dataSource);
		sessioFactory.setConfigLocation("classpath:com/gura/spring05/mybatis/Configuration.xml");
	 -->
	 
	<beans:bean class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg name="sqlSessionFactory" 
			ref="sessionFactory"/>
	</beans:bean>
	
	<!--
		 위의 설정을 java code 로 코딩하면
		new SqlSessionTemplate(sessionFactory); SqlSession 인터페이스를 구현했다.(SqlSession type 이기도 하다)
	 -->
	 
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	<!-- Transaction Manager 설정 -->
	<beans:bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="dataSource"/>
	</beans:bean>
	


	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.gura.spring05" />
	

	
	<!-- 파일 업로드 폼 전송 처리를 위한 bean설정 -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="10240000"/>
	</beans:bean>
	<!-- bean의 이름으로 view 를 찾아갈 수 있도록 설정 -->
	<beans:bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<!-- 0 순위로 찾아가도록하고 없으면 자동으로 views 폴더안에서 jsp페이지를 찾는다. -->
		<beans:property name="order" value="0"/>
	</beans:bean>
	<view-controller path="/error/404.do" view-name="error/404"/>
	<view-controller path="/error/505.do" view-name="error/505"/>
	
</beans:beans>
